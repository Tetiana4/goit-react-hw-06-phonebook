{"version":3,"sources":["redux/actions.js","Component/ContactForm/ContactForm.styled.js","Component/ContactForm/ContactForm.jsx","redux/selectors.js","Component/Filter/Filter.jsx","Component/ContactList/ContactList.styled.js","Component/ContactList/ContactList.jsx","Component/App/App.styled.js","Component/App/App.js","redux/reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","filterContact","Label","styled","label","Button","button","Input","input","ContactForm","useState","setName","setNumber","nameInputId","numberInputId","dispatch","useDispatch","handleChange","event","currentTarget","value","onSubmit","preventDefault","actions","htmlFor","placeholder","type","pattern","title","required","onChange","getFilter","state","contacts","filter","getVisibleList","getContacts","normalisedFilter","toLowerCase","includes","Filter","useSelector","e","propeTypes","PropTypes","string","func","List","ul","ListItem","li","ContactList","map","onClick","onDelete","array","Container","div","Title","h1","App","reducer","createReducer","combineReducers","contactPersistConfig","key","storage","blackList","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","persistReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e9b76367.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('add/Contact', data => ({\n  payload: {\n    id: uuidv4(),\n    name: data.name,\n    number: data.number,\n  },\n}));\n\nexport const deleteContact = createAction('delete/Contact');\n\nexport const filterContact = createAction('changeFilter/Contact');\n\n// redux\n\n// export const filterContact = value => ({\n//   type: FILTER,\n//   payload: value,\n// });\n\n// export const deleteContact = contactId => ({\n//   type: DELETE,\n//   payload: contactId,\n// });\n\n// export const addContact = data => ({\n//   type: ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   },\n// });\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  margin: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Button = styled.button`\n  margin-top: 10px;\n  width: 100px;\n  height: 25px;\n  color: #7b3f3f;\n`;\nexport const Input = styled.input`\n  margin: 0;\n`;\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from \"../../redux/actions\";\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Label, Button, Input } from './ContactForm.styled';\r\n\r\n function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const dispatch = useDispatch();\r\n  const propSubmit = value => dispatch(actions.addContact(value));\r\n   \r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    const resetForm = () => {\r\n      setName('');\r\n      setNumber('');\r\n    };\r\n\r\n    event.preventDefault();\r\n    propSubmit({ name, number });\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Label htmlFor={nameInputId}>\r\n          Name\r\n          <Input\r\n            placeholder=\"name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n            id={nameInputId}\r\n          />\r\n        </Label>\r\n        <Label htmlFor={numberInputId}>\r\n          Number\r\n          <Input\r\n            placeholder=\"number\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n            id={numberInputId}\r\n          />\r\n        </Label>\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n }\r\n\r\nexport default ContactForm;\r\n\r\n\r\nContactForm.propTypes = {\r\n  propSubmit: PropTypes.func,\r\n};\r\n\r\n\r\n\r\n// redux\r\n\r\n// const mapDispatchToProps = (dispatch) =>({\r\n//   propSubmit: value => dispatch(actions.addContact(value)),\r\n// })\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);","export const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleList = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalisedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalisedFilter),\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <label>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(actions.filterContact(e.currentTarget.value))}\n      />\n    </label>\n  )\n};\n\nexport default Filter;\n\nFilter.propeTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n\n\n// redux\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: (event) => dispatch(actions.filterContact(event.currentTarget.value))\n    \n  \n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0 20px;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 5px;\n  padding: 5px 10px;\n  color: #f71c0c;\n  border: 1px solid #723a3a;\n  border-radius: 5px;\n`;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from \"../../redux/actions\";\r\nimport { getVisibleList } from '../../redux/selectors';\r\nimport { List, ListItem, Button } from './ContactList.styled';\r\n\r\n  \r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleList);\r\n  const dispatch = useDispatch();\r\n  const onDelete = (id) => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ListItem key={id}>\r\n          {name}: {number}\r\n          <Button onClick={() => onDelete(id)}>delete</Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propeTypes = {\r\n  contacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\n\r\n\r\n\r\n// redux\r\n\r\n// const mapStateToProps = ({ contacts: { contacts, filter }}) => ({\r\n//   contacts: getVisibleList(contacts, filter),\r\n  \r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDelete: (value) => dispatch(actions.deleteContact(value))\r\n//  });\r\n \r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList)\r\n\r\n\r\n\r\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding: 20px 20px;\n  width: 400px;\n\n  text-align: center;\n  justify-content: center;\n  border-radius: 10px;\n  border: 3px solid #ce6a6a;\n  background-color: #ec9f9f;\n`;\n\nexport const Title = styled.h1`\n  margin: 0 0 20px;\n`;\n","import ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport { Container, Title } from './App.styled';\n\nexport default function App() {\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <p>Find contacts by name</p>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './actions';\n\nconst reducer = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.filterContact]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts: reducer,\n  filter,\n});\n\n// redux\n\n// const reducer = (state = [], { type, payload }) => {\n//   // console.log(payload);\n//   // console.log('log: ', payload);\n//   switch (type) {\n//     case ADD:\n//       return [...state, payload];\n//     case DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   contacts: reducer,\n//   filter,\n// });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport reducer from './reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactPersistConfig = {\n  key: 'contacts',\n  storage,\n  blackList: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactPersistConfig, reducer),\n  },\n  middleware,\n});\n\nconst persistor = persistStore(store);\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n\n// redux\n\n//  const rootReducer = combineReducers({\n//   contacts: reducer,\n// });\n// const store = createStore(rootReducer, composeWithDevTools());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Component/App/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}